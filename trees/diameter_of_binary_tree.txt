int height(Node *root)
{
    if (root == 0)
        return 0;

    int left = height(root->left);
    int right = height(root->right);
    int ans = max(left, right) + 1;

    return ans;
}

int diameter(Node *root)
{
    if (root == 0)
        return 0;

    int op1 = diameter(root->left);
    int op2 = diameter(root->right);
    int op3 = height(root->left) + 1 + height(root->right);

    int ans = max(op1, max(op2, op3));

    return ans;
}

// the diameter will be the longest distance between the two end nodes
// it will be either in the left part of the root or in the right part of the root or also can be the combination of the left and right part 

//Time complexity will be O(n^2) 

//for optimized time complexity O(n) follow the approach given below

pair<int, int> diameterFast(Node *root){
    // base case
    if(root == NULL){
        pair<int, int> p = make_pair(0,0);
        return p;
    }

    pair<int, int> left = diameterFast(root->left;)
    pair<int, int> right = diameterFast(root->right;)

    int op1 = left.first;
    int op2 = right.first;
    int op3 = left.second + right.second + 1;

    pair<int, int> ans;
    ans.first = max(op1, max(op2, op3));
    ans.second = max(left.second, right.second) + 1;

    return ans;
}

int diameter(Node *root){
    return diameterFast(root).first;
}
