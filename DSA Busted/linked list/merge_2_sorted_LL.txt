// we are given two sorted linked lists , We have to merge them into one which is also sorted
// i/p:  1->4->5->NULL     2->3->5->NULL
// o/p:  1->2->3->4->5->5->NULL

Node<int>* solve(Node<int>* first,Node<int>* second){
    // if only one element is present in the list
    if(first->next == NULL){
        first->next = second;
        return first;
    }

    Node<int>* curr1 = first;
    Node<int>* next1 = curr1->next;
    Node<int>* curr2 = second;
    Node<int>* next2 = curr2->next;

    while(next1 != NULL && curr2!=NULL){
        if((curr2->data >= curr1->data) && (curr2->data <=next1->data)){
            // add nodes in between the first list
            curr1->next = curr2;
            next2 = curr2->next;
            curr2->next = next1;

            // update pointers
            curr1 = curr2;
            curr2 = next2;
        }
        else{
            // curr1 and next1 ko aage badhana padegaa
            curr1 = next1;
            next1 = next1->next;

            if(next1 == NULL){
                curr1->next = curr2;
                return first;
            }
        }
    }

    return first;
}

Node<int>* sortTwoLists(Node<int>* first,Node<int>* second){
    if(first == NULL)
        return second;
    if(second == NULL)
        return first;
    
    // it is for checking which linked list having first element having smaller value so as to sort list
    if(first->data <= second->data)
        solve(first,second);
    else
        solve(second,first);
}

