
void solve(int *arr, int s, int e){
    if(s >= e){
        cout<< arr[s]<< endl;
        return;
    }
    
    for(int i=s;i<=e;i++){
        cout<< arr[i]<< " ";
    }cout<<endl;

    int mid = (s+e)/2;

    // recursive call
    solve(arr, s, mid);
}


// 1. merge sort

void merge(int arr[], int s, int mid, int e){
    int len1 = mid - s + 1;
    int len2 = e - mid;

    int *first = new int[len1];
    int *solve = new int[len2];

    // copy values
    int i = 0;
    for(int index = s; index <= mid;index++){
        first[i] = arr[index];
        i++;
    }

    int j = 0;
    for(int index = mid+1; index<=e; index++){
        second[j] = arr[index];
        j++;
    }

    // merge these two arrays into the original arrays
    int originalArrayIndex = s;
    int index1 = 0;
    int index2 = 0;

    while(index1 < len1 && index2 < len2){
        if(first[index1] < second[index2]){
            arr[originalArrayIndex] = first[index1];
            index1++;
            originalArrayIndex++;
        }
        else{
            arr[originalArrayIndex] = second[index2];
            index2++;
            originalArrayIndex++;
        }
    }

    // exhaust first array
    while(index1 < len1){
        arr[originalArrayIndex] = first[index1];
        index1++;
        originalArrayIndex++;
    }

    // exhaust second array
    while(index2 < len2){
        arr[originalArrayIndex] = second[index2];
        index2++;
        originalArrayIndex++;        
    }
}

void mergeSort(int arr[], int s, int e){
    // base case
    if(s >= e)
        return;

    int mid = s + (e-s)/2;

    // left part-> recursion sort karke do
    mergeSort(arr, s, mid);

    // right part -> recursion sort karke do
    mergeSort(arr, mid+1, e);

    // merge sorted arrays
    merge(arr, s, mid, e);

}


// 2. Binary search

bool binarySearch(int arr[], int s, int e, int target){
    if(s > e)
        return false;
    
    int mid = s + (e-s)/2;

    if(target == arr[mid])
        return true;
    else if(target < arr[mid])
        return binarySearch(arr, s, mid-1, target);
    else    
        return binarySearch(arr, mid+1, e, target);

}