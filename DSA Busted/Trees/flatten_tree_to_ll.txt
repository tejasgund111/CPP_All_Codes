// morris traversal
// time complexity -> O(n)
// space complexity -> O(1)

// given a binary tree, flatten it into linked list in place. usage of auxillary data structure is not allowed
// after flattening left of each node should point to NULL and right should contain next node in preorder

void flatten(Node *root){
    Node *curr = root;
    while(curr != NULL){
        if(curr->left){
            Node *pred = curr->left;
            while(pred->right)
                pred = pred->right;
            
            pred->right = curr->right;
            curr->right = curr->left;
            curr->left = NULL;
        }
        curr = curr->right;
    }

    // for making left part NULL
/* curr = root;
    while(curr != NULL){
        curr->left = NULL;
        curr = curr->right;
    } 
*/

}